/// <reference path="../typings/main.d.ts" />
var program = require('commander');
var request = require('request');
var fs = require('fs');
var _ = require("lodash");
var Promise = require('promise');
var typesMap = {
    "integer": "number",
    "object": "any"
};
var StringWriter = (function () {
    function StringWriter() {
        this.buffer = "";
    }
    StringWriter.prototype.write = function (chunk) {
        this.buffer += chunk;
    };
    StringWriter.prototype.end = function () {
    };
    StringWriter.prototype.toString = function () {
        return this.buffer;
    };
    return StringWriter;
})();
var StreamWriter = (function () {
    function StreamWriter(stream) {
        this.stream = stream;
    }
    StreamWriter.prototype.write = function (chunk) {
        this.stream.write(chunk);
    };
    StreamWriter.prototype.end = function () {
        this.stream.end();
    };
    return StreamWriter;
})();
var IndentedTextWriter = (function () {
    function IndentedTextWriter(writer, newLine, tabString) {
        if (newLine === void 0) { newLine = "\r\n"; }
        if (tabString === void 0) { tabString = "    "; }
        this.writer = writer;
        this.newLine = newLine;
        this.tabString = tabString;
        this.indent = 0;
    }
    IndentedTextWriter.prototype.write = function (chunk) {
        this.writer.write(chunk);
    };
    IndentedTextWriter.prototype.startIndentedLine = function (chunk) {
        if (chunk === void 0) { chunk = ""; }
        this.write(Array(this.indent + 1).join(this.tabString) + chunk);
    };
    IndentedTextWriter.prototype.writeLine = function (chunk) {
        if (chunk === void 0) { chunk = ""; }
        this.startIndentedLine(chunk + this.newLine);
    };
    IndentedTextWriter.prototype.end = function () {
        this.writer.end();
    };
    return IndentedTextWriter;
})();
var TypescriptTextWriter = (function () {
    function TypescriptTextWriter(writer) {
        this.writer = writer;
    }
    TypescriptTextWriter.prototype.braces = function (text, context) {
        this.writer.writeLine(text + " {");
        this.writer.indent++;
        context(this);
        this.writer.indent--;
        this.writer.writeLine("}");
    };
    TypescriptTextWriter.prototype.reference = function (path) {
        this.writer.writeLine("/// <reference path=\"" + path + "\" />");
    };
    TypescriptTextWriter.prototype.namespace = function (name, context) {
        this.writer.writeLine();
        this.braces("namespace " + name, context);
    };
    TypescriptTextWriter.prototype.declareNamespace = function (name, context) {
        this.writer.writeLine();
        this.braces("declare namespace " + name, context);
    };
    TypescriptTextWriter.prototype.interface = function (name, context) {
        this.writer.writeLine();
        this.braces("interface " + name, context);
    };
    TypescriptTextWriter.prototype.anonymysType = function (context) {
        this.writer.write("{");
        this.writer.writeLine();
        this.writer.indent++;
        context(this);
        this.writer.indent--;
        this.writer.startIndentedLine("}");
    };
    TypescriptTextWriter.prototype.property = function (name, type, required) {
        if (required === void 0) { required = true; }
        if (typeof type === 'function') {
            this.writer.startIndentedLine("" + name + (required ? "" : "?") + ": ");
            type(this);
            this.writer.write(",");
            this.writer.writeLine();
        }
        else if (typeof type === 'string') {
            this.writer.writeLine("" + name + (required ? "" : "?") + ": " + type + ",");
        }
    };
    TypescriptTextWriter.prototype.comment = function (text) {
        var _this = this;
        if (text === void 0) { text = ""; }
        var lines = text.split(/\r\n|\r|\n|\u000a\u000d|\u000a|\u000d|\u240a/g);
        _.forEach(lines, function (line) { return _this.writer.writeLine("// " + line); });
    };
    TypescriptTextWriter.prototype.method = function (name, parameters, returnType) {
        this.writer.writeLine(name + "(" + parameters.map(function (p) { return p.parameter + ": " + p.type; }).join(", ") + "): " + returnType + ";");
    };
    TypescriptTextWriter.prototype.writeLine = function (chunk) {
        if (chunk === void 0) { chunk = ""; }
        this.writer.writeLine(chunk);
    };
    TypescriptTextWriter.prototype.write = function (chunk) {
        if (chunk === void 0) { chunk = ""; }
        this.writer.write(chunk);
    };
    TypescriptTextWriter.prototype.end = function () {
        this.writer.end();
    };
    return TypescriptTextWriter;
})();
function processResource(resource) {
    var childs = _.map(resource.resources || {}, function (value) { return processResource(value); });
    return _.union(_.map(resource.methods || {}, function (value) { return value; }), childs);
}
function getNamespace(path) {
    var parts = path.split('.');
    if (parts.length > 0) {
        parts.splice(parts.length - 1);
        var n = _.camelCase(parts.join('.'));
        return parts.join('.');
    }
    else
        return null;
}
function getName(path) {
    var parts = path.split('.');
    if (parts.length > 0)
        return _.last(parts);
    else
        return null;
}
function formatParameters(method, out) {
    out("{");
    _.forEach(method.parameters, function (data, key) {
        out("\t" + key + ": " + (typesMap[data.type] || data.type) + ",");
    });
    out("}");
    //return "{ \r\n\t\t" + _.map(method.parameters, (data, key) => key + ": " + (typesMap[data.type] || data.type)).join(", \r\n\t\t") + "\r\n\t\t }";
}
function firstLetterUp(text) {
    return text[0].toUpperCase() + text.substring(1);
}
function getMethodParameterInterfaceName(resource, method) {
    return firstLetterUp(resource) + firstLetterUp(getName(method.id)) + "Request";
}
function getType(type) {
    if (type.type === "array") {
        return function (writer) {
            var child = getType(type.items);
            if (typeof child === "string") {
                writer.write(child);
            }
            else if (typeof child === "function") {
                child(writer);
            }
            writer.write("[]");
        };
    }
    else if (type.type === "object" && type.properties) {
        return function (writer) {
            writer.anonymysType(function () {
                return _.forEach(type.properties, function (data, key) {
                    writer.comment(formatComment(data.description));
                    writer.property(key, getType(data), data.required || false);
                });
            });
        };
    }
    else if (type.type) {
        return typesMap[type.type] || type.type;
    }
    else if (type.$ref) {
        return type.$ref;
    }
    else
        throw Error();
}
function formatComment(comment) {
    if (!comment)
        return "";
    return comment;
}
function getMethodReturn(method) {
    if (method.response) {
        return "PromiseLike<ApiResult<" + method.response.$ref + ">>";
    }
    else {
        return "PromiseLike<void>";
    }
}
var App = (function () {
    function App(output) {
        if (output === void 0) { output = __dirname + "/../out/"; }
        this.output = output;
        console.log("output directory: " + this.output);
        console.log();
    }
    // writes specified resource definition
    App.prototype.writeResources = function (out, resources) {
        var _this = this;
        _.forEach(resources, function (resource, resourceName) {
            var resourceInterfaceName = resourceName[0].toUpperCase() + resourceName.substring(1) + "Resource";
            _this.writeResources(out, resource.resources);
            _.forEach(resource.methods, function (method, name) {
                out.interface(getMethodParameterInterfaceName(resourceName, method), function () {
                    _.forEach(method.parameters, function (parameter, key) {
                        out.comment(formatComment(parameter.description));
                        out.property(key, typesMap[parameter.type] || parameter.type, parameter.required || false);
                    });
                });
            });
            out.interface(resourceInterfaceName, function () {
                _.forEach(resource.methods, function (method, name) {
                    out.comment(formatComment(method.description));
                    out.method(getName(method.id), [{ parameter: "request", type: getMethodParameterInterfaceName(resourceName, method) }], getMethodReturn(method));
                });
                _.forEach(resource.resources, function (childResource, childResourceName) {
                    var childResourceInterfaceName = childResourceName[0].toUpperCase() + childResourceName.substring(1) + "Resource";
                    out.property(childResourceName, childResourceInterfaceName);
                });
            });
            out.writeLine();
            out.writeLine("var " + resourceName + ": " + resourceInterfaceName + ";");
            out.writeLine();
        });
    };
    /// writes api description for specified JSON object
    App.prototype.processApi = function (api, actualVersion) {
        var _this = this;
        console.log("Generating " + api.id + " definitions...");
        var methods = _(processResource(api)).flatten(true).map(function (x) {
            return {
                namespace: getNamespace(x.id),
                name: getName(x.id),
                method: x
            };
        }).value(), grouped = _.groupBy(methods, function (method) { return method.namespace; }), stream = fs.createWriteStream(this.output + api.name + (actualVersion ? "" : "-" + api.version) + ".d.ts"), writer = new TypescriptTextWriter(new IndentedTextWriter(new StreamWriter(stream)));
        writer.reference("gapi.d.ts");
        writer.declareNamespace("gapi", function () {
            writer.namespace("client", function () {
                _.forEach(api.schemas, function (schema, key) {
                    writer.interface(schema.id, function () {
                        _.forEach(schema.properties, function (data, key) {
                            writer.comment(formatComment(data.description));
                            writer.property(key, getType(data), data.required || false);
                        });
                    });
                });
                _this.writeResources(writer, api.resources);
            });
        });
        writer.end();
    };
    App.prototype.request = function (url) {
        return new Promise(function (resolve, reject) {
            request(url, function (error, response, body) {
                if (!error && response.statusCode == 200) {
                    var api = JSON.parse(body);
                    resolve(api);
                }
                else {
                    console.error("Got an error: ", error, ", status code: ", response.statusCode);
                    reject(error);
                }
            });
        });
    };
    App.prototype.filterServices = function (apis, service, allVersions) {
        apis = _.filter(apis, function (api) { return service == null || api.name === service; });
        // _(apis)
        //     .groupBy(api => api.name)
        //     .each((variants, key) => _.each(variants, v => v.actualVersion = v === _.last(variants)))
        //     .value();
        apis = _.filter(apis, function (api) { return allVersions || api.preferred; });
        return apis;
    };
    App.prototype.processService = function (url, actualVersion) {
        var _this = this;
        return this
            .request(url)
            .then(function (api) { return _this.processApi(api, actualVersion); });
    };
    App.prototype.discover = function (service, allVersions) {
        var _this = this;
        if (service === void 0) { service = null; }
        if (allVersions === void 0) { allVersions = false; }
        console.log("Discovering Google services...");
        return this
            .request("https://www.googleapis.com/discovery/v1/apis")
            .then(function (apis) { return _this.filterServices(apis.items, service, allVersions); })
            .then(function (items) {
            if (items.length === 0) {
                console.error("Can't find services");
                throw Error("Can't find services");
            }
            else {
                return items.reduce(function (cur, api) { return cur.then(function () { return _this.processService(api.discoveryRestUrl, api.preferred); }); }, Promise.resolve(null));
            }
        });
    };
    return App;
})();
var params = program
    .version("0.0.1")
    .allowUnknownOption(false)
    .option("-u, --url [url]", "process only specific REST service definition by url")
    .option("-s, --service [name]", "process only specific REST service definition by name")
    .option("-a, --all", "include previously versions", false)
    .option("-o, --out", "output directory")
    .parse(process.argv);
var app = new App(params.out);
if (params.url) {
    app
        .processService(params.url, true)
        .then(function () { return console.log("Done"); });
}
else {
    app
        .discover(params.service, params.all)
        .then(function () { return console.log("Done"); });
}
//# sourceMappingURL=data:application/json;base64,