// Type definitions for Google Genomics API v1alpha2
// Project: 
// Definitions by: Bolisov Alexey

/// <reference path="../gapi.client/gapi.client.d.ts" />

declare module gapi.client.genomics.v1alpha2 {
    
    interface Operation {
        // The server-assigned name, which is only unique within the same service that originally returns it. For example: `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
        name?: string,
        // An OperationMetadata object. This will always be returned with the Operation.
        metadata?: any,
        // If the value is `false`, it means the operation is still in progress. If true, the operation is completed, and either `error` or `response` is available.
        done?: boolean,
        // The error result of the operation in case of failure.
        error?: Status,
        // If importing ReadGroupSets, an ImportReadGroupSetsResponse is returned. If importing Variants, an ImportVariantsResponse is returned. For exports, an empty response is returned.
        response?: any,
    }
    
    interface Status {
        // The status code, which should be an enum value of google.rpc.Code.
        code?: number,
        // A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        message?: string,
        // A list of messages that carry the error details. There will be a common set of message types for APIs to use.
        details?: any[],        
    }
    
    interface ListOperationsResponse {
        // A list of operations that matches the specified filter in the request.
        operations?: Operation[],        
        // The standard List next-page token.
        nextPageToken?: string,
    }
    
    interface CancelOperationRequest {
    }
    
    interface Empty {
    }
    
    interface Pipeline {
        // Required. The project in which to create the pipeline. The caller must have WRITE access.
        projectId?: string,
        // Required. A user specified pipeline name that does not have to be unique. This name can be used for filtering Pipelines in ListPipelines.
        name?: string,
        // Optional. User-specified description.
        description?: string,
        // Input parameters of the pipeline.
        inputParameters?: PipelineParameter[],        
        // Output parameters of the pipeline.
        outputParameters?: PipelineParameter[],        
        // Specifies the docker run information.
        docker?: DockerExecutor,
        // Required. Specifies resource requirements for the pipeline run. Required fields: * minimumCpuCores * minimumRamGb
        resources?: PipelineResources,
        // Unique pipeline id that is generated by the service when CreatePipeline is called. Cannot be specified in the Pipeline used in the CreatePipelineRequest, and will be populated in the response to CreatePipeline and all subsequent Get and List calls. Indicates that the service has registered this pipeline.
        pipelineId?: string,
    }
    
    interface PipelineParameter {
        // Required. Name of the parameter - the pipeline runner uses this string as the key to the input and output maps in RunPipeline.
        name?: string,
        // Optional. Human-readable description.
        description?: string,
        // The default value for this parameter. Can be overridden at runtime. If `localCopy` is present, then this must be a Google Cloud Storage path beginning with `gs://`.
        defaultValue?: string,
        // If present, this parameter is marked for copying to and from the VM. `LocalCopy` indicates where on the VM the file should be. The value given to this parameter (either at runtime or using `defaultValue`) must be the remote path where the file should be.
        localCopy?: LocalCopy,
    }
    
    interface LocalCopy {
        // Required. The path within the user's docker container where this input should be localized to and from, relative to the specified disk's mount point. For example: file.txt,
        path?: string,
        // Required. The name of the disk where this parameter is located. Can be the name of one of the disks specified in the Resources field, or "boot", which represents the Docker instance's boot disk and has a mount point of `/`.
        disk?: string,
    }
    
    interface DockerExecutor {
        // Required. Image name from either Docker Hub or Google Container Repository. Users that run pipelines must have READ access to the image.
        imageName?: string,
        // Required. The command string to run. Parameters that do not have `localCopy` specified should be used as environment variables, while those that do can be accessed at the defined paths.
        cmd?: string,
    }
    
    interface PipelineResources {
        // Required at create time; optional at run time. The minimum number of cores to use.
        minimumCpuCores?: number,
        // Optional. At create time means that preemptible machines may be used for the run. At run time, means they should be used. Cannot be true at run time if false at create time.
        preemptible?: boolean,
        // Required at create time; optional at run time. The minimum amount of RAM to use.
        minimumRamGb?: number,
        // Disks to attach.
        disks?: Disk[],        
        // List of Google Compute Engine availability zones to which resource creation will restricted. If empty, any zone may be chosen.
        zones?: string[],        
    }
    
    interface Disk {
        // Required. The name of the disk that can be used in the pipeline parameters. Must be 1 - 63 characters. The name "boot" is reserved for system use.
        name?: string,
        // Required. The type of the disk to create.
        type?: string,
        // The size of the disk. This field is not applicable for local SSD.
        sizeGb?: number,
        // The full or partial URL of the persistent disk to attach. See https://cloud.google.com/compute/docs/reference/latest/instances#resource and https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots for more details.
        source?: string,
        // Specifies whether or not to delete the disk when the pipeline completes. This field is applicable only for newly created disks. See https://cloud.google.com/compute/docs/reference/latest/instances#resource for more details. Optional. At create time means that an auto delete disk may be used. At run time, means it should be used. Cannot be true at run time if false at create time.
        autoDelete?: boolean,
        // Specifies how a sourced-base persistent disk will be mounted. See https://cloud.google.com/compute/docs/disks/persistent-disks#use_multi_instances for more details. Can only be set at create time.
        readOnly?: boolean,
        // Required at create time and cannot be overridden at run time. Specifies the path in the docker container where files on this disk should be located. For example, if `mountPoint` is `/mnt/disk`, and the parameter has `localPath` `inputs/file.txt`, the docker container can access the data at `/mnt/disk/inputs/file.txt`.
        mountPoint?: string,
    }
    
    interface RunPipelineRequest {
        // The already created pipeline to run.
        pipelineId?: string,
        // A new pipeline object to run once and then delete.
        ephemeralPipeline?: Pipeline,
        // The arguments to use when running this pipeline.
        pipelineArgs?: RunPipelineArgs,
    }
    
    interface RunPipelineArgs {
        // Required. The project in which to run the pipeline. The caller must have WRITER access to all Google Cloud services and resources (e.g. Google Compute Engine) will be used.
        projectId?: string,
        // Pipeline input arguments; keys are defined in the pipeline documentation. All input parameters that do not have default values must be specified. If parameters with defaults are specified here, the defaults will be overridden.
        inputs?: any,
        // Pipeline output arguments; keys are defined in the pipeline documentation. All output parameters of without default values must be specified. If parameters with defaults are specified here, the defaults will be overridden.
        outputs?: any,
        // Required. The Google Cloud Service Account that will be used to access data and services.
        serviceAccount?: ServiceAccount,
        // Optional. For callers to use in filtering operations returned by this request.
        clientId?: string,
        // Specifies resource requirements/overrides for the pipeline run.
        resources?: PipelineResources,
        // Required. Logging options. Used by the service to communicate results to the user.
        logging?: LoggingOptions,
    }
    
    interface ServiceAccount {
        // Required. Email address of the service account. 'default' is a valid option and uses the compute service account associated with the project.
        email?: string,
        // Required. List of scopes to be made available for this service account. Should include * https://www.googleapis.com/auth/genomics * https://www.googleapis.com/auth/compute * https://www.googleapis.com/auth/devstorage.full_control
        scopes?: string[],        
    }
    
    interface LoggingOptions {
        // The location in Google Cloud Storage to which the pipeline logs will be copied. Can be specified as a fully qualified directory path, in which case logs will be output with a unique identifier as the filename in that directory, or as a fully specified path, which must end in `.log`, in which case that path will be used, and the user must ensure that logs are not overwritten. Stdout and stderr logs from the run are also generated and output as `-stdout.log` and `-stderr.log`.
        gcsPath?: string,
    }
    
    interface ListPipelinesResponse {
        // The matched pipelines.
        pipelines?: Pipeline[],        
        // The token to use to get the next page of results.
        nextPageToken?: string,
    }
    
    interface ControllerConfig {
        // 
        image?: string,
        // 
        cmd?: string,
        // 
        gcsLogPath?: string,
        // 
        machineType?: string,
        // 
        vars?: any,
        // 
        disks?: any,
        // 
        gcsSources?: any,
        // 
        gcsSinks?: any,
    }
    
    interface RepeatedString {
        // 
        values?: string[],        
    }
    
    interface SetOperationStatusRequest {
        // 
        operationId?: string,
        // 
        timestampEvents?: TimestampEvent[],        
        // 
        errorCode?: string,
        // 
        errorMessage?: string,
        // 
        validationToken?: string,
    }
    
    interface TimestampEvent {
        // String indicating the type of event
        description?: string,
        // The time this event occured.
        timestamp?: string,
    }
    
    interface ImportReadGroupSetsResponse {
        // IDs of the read group sets that were created.
        readGroupSetIds?: string[],        
    }
    
    interface ImportVariantsResponse {
        // IDs of the call sets created during the import.
        callSetIds?: string[],        
    }
    
    interface OperationMetadata {
        // The Google Cloud Project in which the job is scoped.
        projectId?: string,
        // The time at which the job was submitted to the Genomics service.
        createTime?: string,
        // The original request that started the operation. Note that this will be in current version of the API. If the operation was started with v1beta2 API and a GetOperation is performed on v1 API, a v1 request will be returned.
        request?: any,
        // Optional event messages that were generated during the job's execution. This also contains any warnings that were generated during import or export.
        events?: OperationEvent[],        
    }
    
    interface OperationEvent {
        // Required description of event.
        description?: string,
    }
    
    interface OperationsResource {
        // Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
        get (request: {        
            // The name of the operation resource.
            name: string,
        }) : gapi.client.Request<Operation>;        
        
        // Lists operations that match the specified filter in the request.
        list (request: {        
            // The name of the operation collection.
            name: string,
            // A string for filtering Operations. The following filter fields are supported: * projectId: Required. Corresponds to OperationMetadata.projectId. * createTime: The time this job was created, in seconds from the [epoch](http://en.wikipedia.org/wiki/Unix_time). Can use `>=` and/or `= 1432140000` * `projectId = my-project AND createTime >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING`
            filter?: string,
            // The maximum number of results to return. If unspecified, defaults to 256. The maximum value is 2048.
            pageSize?: number,
            // The standard list page token.
            pageToken?: string,
        }) : gapi.client.Request<ListOperationsResponse>;        
        
        // Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation.
        cancel (request: {        
            // The name of the operation resource to be cancelled.
            name: string,
        }) : gapi.client.Request<Empty>;        
        
    }
    
    
    interface PipelinesResource {
        // Creates a pipeline that can be run later. Create takes a Pipeline that has all fields other than `pipelineId` populated, and then returns the same pipeline with `pipelineId` populated. This id can be used to run the pipeline. Caller must have WRITE permission to the project.
        create (request: {        
        }) : gapi.client.Request<Pipeline>;        
        
        // Runs a pipeline. If `pipelineId` is specified in the request, then run a saved pipeline. If `ephemeralPipeline` is specified, then run that pipeline once without saving a copy. The caller must have READ permission to the project where the pipeline is stored and WRITE permission to the project where the pipeline will be run, as VMs will be created and storage will be used.
        run (request: {        
        }) : gapi.client.Request<Operation>;        
        
        // Retrieves a pipeline based on ID. Caller must have READ permission to the project.
        get (request: {        
            // Caller must have READ access to the project in which this pipeline is defined.
            pipelineId: string,
        }) : gapi.client.Request<Pipeline>;        
        
        // Lists pipelines. Caller must have READ permission to the project.
        list (request: {        
            // Required. The name of the project to search for pipelines. Caller must have READ access to this project.
            projectId?: string,
            // Optional. Pipelines with names that match this prefix should be returned. If unspecified, all pipelines in the project, up to `pageSize`, will be returned.
            namePrefix?: string,
            // Optional. Number of pipelines to return at once. Defaults to 256, and max is 2048.
            pageSize?: number,
            // Optional. Token to use to indicate where to start getting results. If unspecified, returns the first page of results.
            pageToken?: string,
        }) : gapi.client.Request<ListPipelinesResponse>;        
        
        // Deletes a pipeline based on ID. Caller must have WRITE permission to the project.
        delete (request: {        
            // Caller must have WRITE access to the project in which this pipeline is defined.
            pipelineId: string,
        }) : gapi.client.Request<Empty>;        
        
        // Gets controller configuration information. Should only be called by VMs created by the Pipelines Service and not by end users.
        getControllerConfig (request: {        
            // The operation to retrieve controller configuration for.
            operationId?: string,
            // 
            validationToken?: string,
        }) : gapi.client.Request<ControllerConfig>;        
        
        // Sets status of a given operation. All timestamps are sent on each call, and the whole series of events is replaced, in case intermediate calls are lost. Should only be called by VMs created by the Pipelines Service and not by end users.
        setOperationStatus (request: {        
        }) : gapi.client.Request<Empty>;        
        
    }
    
}

declare module gapi.client.genomics {
    var operations: gapi.client.genomics.v1alpha2.OperationsResource; 
    
    var pipelines: gapi.client.genomics.v1alpha2.PipelinesResource; 
    
}
