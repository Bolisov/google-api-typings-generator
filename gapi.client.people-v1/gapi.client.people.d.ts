// Type definitions for Google Google People API v1
// Project: https://developers.google.com/people/
// Definitions by: Bolisov Alexey

/// <reference path="../gapi.client/gapi.client.d.ts" />

declare module gapi.client.people {
    
    interface Person {
        // The resource name for the person, assigned by the server. An ASCII string with a max length of 27 characters. Always starts with `people/`.
        resourceName?: string,
        // The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
        etag?: string,
        // Metadata about the person.
        metadata?: PersonMetadata,
        // The person's locale preferences.
        locales?: Locale[],        
        // The person's names.
        names?: Name[],        
        // The person's nicknames.
        nicknames?: Nickname[],        
        // The person's cover photos.
        coverPhotos?: CoverPhoto[],        
        // The person's photos.
        photos?: Photo[],        
        // The person's genders.
        genders?: Gender[],        
        // The person's age range.
        ageRange?: string,
        // The person's birthdays.
        birthdays?: Birthday[],        
        // The person's events.
        events?: Event[],        
        // The person's street addresses.
        addresses?: Address[],        
        // The person's residences.
        residences?: Residence[],        
        // The person's email addresses.
        emailAddresses?: EmailAddress[],        
        // The person's phone numbers.
        phoneNumbers?: PhoneNumber[],        
        // The person's instant messaging clients.
        imClients?: ImClient[],        
        // The person's taglines.
        taglines?: Tagline[],        
        // The person's biographies.
        biographies?: Biography[],        
        // The person's associated URLs.
        urls?: Url[],        
        // The person's past or current organizations.
        organizations?: Organization[],        
        // The person's occupations.
        occupations?: Occupation[],        
        // The person's interests.
        interests?: Interest[],        
        // The person's skills.
        skills?: Skill[],        
        // The person's bragging rights.
        braggingRights?: BraggingRights[],        
        // The person's relations.
        relations?: Relation[],        
        // The kind of relationship the person is looking for.
        relationshipInterests?: RelationshipInterest[],        
        // The person's relationship statuses.
        relationshipStatuses?: RelationshipStatus[],        
        // The person's group memberships.
        memberships?: Membership[],        
    }
    
    interface PersonMetadata {
        // The sources of data for the person.
        sources?: Source[],        
        // Any former resource names this person has had. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.
        previousResourceNames?: string[],        
        // True if the person resource has been deleted. Populated only for [`connections.list`](/people/api/rest/v1/people.connections/list) requests that include a sync token.
        deleted?: boolean,
        // The type of the person object.
        objectType?: string,
    }
    
    interface Source {
        // The source type.
        type?: string,
        // A unique identifier within the source type generated by the server.
        id?: string,
    }
    
    interface Locale {
        // Metadata about the locale.
        metadata?: FieldMetadata,
        // The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.
        value?: string,
    }
    
    interface FieldMetadata {
        // True if the field is the primary field; false if the field is a secondary field.
        primary?: boolean,
        // True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.
        verified?: boolean,
        // The source of the field.
        source?: Source,
    }
    
    interface Name {
        // Metadata about the name.
        metadata?: FieldMetadata,
        // The display name formatted according to the locale specified by the viewer's account or the Accept-Language HTTP header.
        displayName?: string,
        // The family name.
        familyName?: string,
        // The given name.
        givenName?: string,
        // The middle name(s).
        middleName?: string,
        // The honorific prefixes, such as `Mrs.` or `Dr.`
        honorificPrefix?: string,
        // The honorific suffixes, such as `Jr.`
        honorificSuffix?: string,
        // The family name spelled as it sounds.
        phoneticFamilyName?: string,
        // The given name spelled as it sounds.
        phoneticGivenName?: string,
        // The middle name(s) spelled as they sound.
        phoneticMiddleName?: string,
        // The honorific prefixes spelled as they sound.
        phoneticHonorificPrefix?: string,
        // The honorific suffixes spelled as they sound.
        phoneticHonorificSuffix?: string,
    }
    
    interface Nickname {
        // Metadata about the nickname.
        metadata?: FieldMetadata,
        // The nickname.
        value?: string,
        // The type of the nickname.
        type?: string,
    }
    
    interface CoverPhoto {
        // Metadata about the cover photo.
        metadata?: FieldMetadata,
        // The URL of the cover photo.
        url?: string,
        // True if the cover photo is the default cover photo; false if the cover photo is a user-provided cover photo.
        default?: boolean,
    }
    
    interface Photo {
        // Metadata about the photo.
        metadata?: FieldMetadata,
        // The URL of the photo.
        url?: string,
    }
    
    interface Gender {
        // Metadata about the gender.
        metadata?: FieldMetadata,
        // The gender for the person. The gender can be custom or predefined. Possible values include, but are not limited to, the following: * `male` * `female` * `other` * `unknown`
        value?: string,
        // The read-only value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedValue?: string,
    }
    
    interface Birthday {
        // Metadata about the birthday.
        metadata?: FieldMetadata,
        // The date of the birthday.
        date?: Date,
        // A free-form string representing the user's birthday.
        text?: string,
    }
    
    interface Date {
        // Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
        year?: number,
        // Month of year. Must be from 1 to 12.
        month?: number,
        // Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.
        day?: number,
    }
    
    interface Event {
        // Metadata about the event.
        metadata?: FieldMetadata,
        // The date of the event.
        date?: Date,
        // The type of the event. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `anniversary` * `other`
        type?: string,
        // The read-only type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
    }
    
    interface Address {
        // Metadata about the address.
        metadata?: FieldMetadata,
        // The read-only value of the address formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedValue?: string,
        // The type of the address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`
        type?: string,
        // The read-only type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
        // The P.O. box of the address.
        poBox?: string,
        // The street address.
        streetAddress?: string,
        // The extended address of the address; for example, the apartment number.
        extendedAddress?: string,
        // The city of the address.
        city?: string,
        // The region of the address; for example, the state or province.
        region?: string,
        // The postal code of the address.
        postalCode?: string,
        // The country of the address.
        country?: string,
        // The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.
        countryCode?: string,
    }
    
    interface Residence {
        // Metadata about the residence.
        metadata?: FieldMetadata,
        // The address of the residence.
        value?: string,
        // True if the residence is the person's current residence; false if the residence is a past residence.
        current?: boolean,
    }
    
    interface EmailAddress {
        // Metadata about the email address.
        metadata?: FieldMetadata,
        // The email address.
        value?: string,
        // The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`
        type?: string,
        // The read-only type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
    }
    
    interface PhoneNumber {
        // Metadata about the phone number.
        metadata?: FieldMetadata,
        // The phone number.
        value?: string,
        // The read-only canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.
        canonicalForm?: string,
        // The type of the phone number. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`
        type?: string,
        // The read-only type of the phone number translated and formatted in the viewer's account locale or the the `Accept-Language` HTTP header locale.
        formattedType?: string,
    }
    
    interface ImClient {
        // Metadata about the IM client.
        metadata?: FieldMetadata,
        // The user name used in the IM client.
        username?: string,
        // The type of the IM client. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `other`
        type?: string,
        // The read-only type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
        // The protocol of the IM client. The protocol can be custom or predefined. Possible values include, but are not limited to, the following: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`
        protocol?: string,
        // The read-only protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedProtocol?: string,
    }
    
    interface Tagline {
        // Metadata about the tagline.
        metadata?: FieldMetadata,
        // The tagline.
        value?: string,
    }
    
    interface Biography {
        // Metadata about the biography.
        metadata?: FieldMetadata,
        // The short biography.
        value?: string,
    }
    
    interface Url {
        // Metadata about the URL.
        metadata?: FieldMetadata,
        // The URL.
        value?: string,
        // The type of the URL. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Google+ application. * `other`
        type?: string,
        // The read-only type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
    }
    
    interface Organization {
        // Metadata about the organization.
        metadata?: FieldMetadata,
        // The type of the organization. The type can be custom or predefined. Possible values include, but are not limited to, the following: * `work` * `school`
        type?: string,
        // The read-only type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedType?: string,
        // The start date when the person joined the organization.
        startDate?: Date,
        // The end date when the person left the organization.
        endDate?: Date,
        // True if the organization is the person's current organization; false if the organization is a past organization.
        current?: boolean,
        // The name of the organization.
        name?: string,
        // The phonetic name of the organization.
        phoneticName?: string,
        // The person's department at the organization.
        department?: string,
        // The person's job title at the organization.
        title?: string,
        // The person's job description at the organization.
        jobDescription?: string,
        // The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.
        symbol?: string,
        // The domain name associated with the organization; for example, `google.com`.
        domain?: string,
        // The location of the organization office the person works at.
        location?: string,
    }
    
    interface Occupation {
        // Metadata about the occupation.
        metadata?: FieldMetadata,
        // The occupation; for example, `carpenter`.
        value?: string,
    }
    
    interface Interest {
        // Metadata about the interest.
        metadata?: FieldMetadata,
        // The interest; for example, `stargazing`.
        value?: string,
    }
    
    interface Skill {
        // Metadata about the skill.
        metadata?: FieldMetadata,
        // The skill; for example, `underwater basket weaving`.
        value?: string,
    }
    
    interface BraggingRights {
        // Metadata about the bragging rights.
        metadata?: FieldMetadata,
        // The bragging rights; for example, `climbed mount everest`.
        value?: string,
    }
    
    interface Relation {
        // Metadata about the relation.
        metadata?: FieldMetadata,
        // The name of the other person this relation refers to.
        person?: string,
        // The person's relation to the other person. The type can be custom or predefined. Possible values include, but are not limited to, the following values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
        type?: string,
        // The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
        formattedType?: string,
    }
    
    interface RelationshipInterest {
        // Metadata about the relationship interest.
        metadata?: FieldMetadata,
        // The kind of relationship the person is looking for. The value can be custom or predefined. Possible values include, but are not limited to, the following values: * `friend` * `date` * `relationship` * `networking`
        value?: string,
        // The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
        formattedValue?: string,
    }
    
    interface RelationshipStatus {
        // Metadata about the relationship status.
        metadata?: FieldMetadata,
        // The relationship status. The value can be custom or predefined. Possible values include, but are not limited to, the following: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`
        value?: string,
        // The read-only value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
        formattedValue?: string,
    }
    
    interface Membership {
        // Metadata about the membership.
        metadata?: FieldMetadata,
        // The contact group membership.
        contactGroupMembership?: ContactGroupMembership,
        // The domain membership.
        domainMembership?: DomainMembership,
    }
    
    interface ContactGroupMembership {
        // The contact group ID for the contact group membership. The contact group ID can be custom or predefined. Possible values include, but are not limited to, the following: * `myContacts` * `starred` * A numerical ID for user-created groups.
        contactGroupId?: string,
    }
    
    interface DomainMembership {
        // True if the person is in the viewer's Google Apps domain.
        inViewerDomain?: boolean,
    }
    
    interface GetPeopleResponse {
        // The response for each requested resource name.
        responses?: PersonResponse[],        
    }
    
    interface PersonResponse {
        // [HTTP 1.1 status code](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
        httpStatusCode?: number,
        // The person.
        person?: Person,
        // The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.
        requestedResourceName?: string,
    }
    
    interface ListConnectionsResponse {
        // The list of people that the requestor is connected to.
        connections?: Person[],        
        // The token that can be used to retrieve the next page of results.
        nextPageToken?: string,
        // The token that can be used to retrieve changes since the last request.
        nextSyncToken?: string,
    }
    
    interface ConnectionsResource {
        // Provides a list of the authenticated user's contacts merged with any linked profiles.
        list (request: {        
            // The resource name to return connections for. Only `people/me` is valid.
            resourceName: string,
            // The token of the page to be returned.
            pageToken?: string,
            // The number of connections to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100.
            pageSize?: number,
            // The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.
            sortOrder?: string,
            // A sync token, returned by a previous call to `people.connections.list`. Only resources changed since the sync token was created are returned.
            syncToken?: string,
            // Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.
            requestMask.includeField?: string,
        }) : gapi.client.Request<ListConnectionsResponse>;        
        
    }
    
    
    interface PeopleResource {
        // Provides information about a person resource for a resource name. Use `people/me` to indicate the authenticated user.
        get (request: {        
            // The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about any user, specify the resource name that identifies the user, such as the resource names returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list).
            resourceName: string,
            // Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.
            requestMask.includeField?: string,
        }) : gapi.client.Request<Person>;        
        
        // Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user.
        getBatchGet (request: {        
            // The resource name, such as one returned by [`people.connections.list`](/people/api/rest/v1/people.connections/list), of one of the people to provide information about. You can include this parameter up to 50 times in one request.
            resourceNames?: string,
            // Comma-separated list of fields to be included in the response. Omitting this field will include all fields. Each path should start with `person.`: for example, `person.names` or `person.photos`.
            requestMask.includeField?: string,
        }) : gapi.client.Request<GetPeopleResponse>;        
        
        connections: ConnectionsResource,
    }
    
}

declare module gapi.client.people {
    var people: gapi.client.people.PeopleResource; 
    
}
